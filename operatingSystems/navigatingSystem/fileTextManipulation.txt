> WINDOWS: DISPLAY FILE CONTENTS 
Now that we've learned the basics of file and directory navigation, let's learn how we can display and edit files, search for text within files and more. In the Windows GUI, if we want to open a file and view its contents, we can just double click on the file. Depending on the file type, it will open on a default application. In Windows, text files default to open in an application called notepad. But we can change this if we want to. To change the default application that opens files, just right click and click Properties. Under 'Open with', we can change the application to another text editor, like Word Pad. Most of the files that we'll be dealing with throughout this course, will be text and configuration files. So, let's just focus on those files instead of images, music files, etc. Viewing the contents of a file in PowerShell is simply using the 'cat' command, which stands for concatenate. Let's give it a try.
Play video starting at :1:27 and follow transcript1:27
This will dump the contents of the file into our shell. This isn't the best solution for a file since it just keeps writing the content until the whole file is displayed. If we want to view the contents of the file one page at a time, we can use the 'more' command, like this.
Play video starting at :1:50 and follow transcript1:50
The 'more' command will get the contents of the file but will pause once it fills the terminal window. Now, we can advance the text at our own pace. When we run the 'more' command, were launched into a separate program from the shell. This means that we interact with the more program with different keys. The Enter key advances the file by one line. You can use this if you want to move slowly through the file. Space advances the file by one page. A page in this case depends on the size of your terminal window. Basically, 'more' will output enough content to fill the terminal window. The q key allows you to quit out of 'more' and go back to your shell. If we want to leave the 'more' command and go back to our shell, we can just hit the q key. Here we are. Now, what if we just wanted to view part of the file? Let's say we want to quickly see what the first few lines of the text file are. We don't really want to open up the whole file. Instead, we just want to get a glimpse of what the document is. This is called the head of the file. To do this, we can go back to 'cat' and add the -Head parameter. This will show us the first 10 lines of the file. Now, what if we wanted to view the last few lines or the tail of the file? I bet you can guess what you are going to do.
Play video starting at :3:32 and follow transcript3:32
This will show us, by default, the last ten lines of the file. Again, these two commands don't seem like they have any immediate use to you yet. We'll see their benefits when we work with logs in an upcoming lesson. Now, let's take a look at how to do these same tasks in Linux.

> LINUX: DISPLAY FILE CONTENTS 
To read a simple file in Bash, we can also use the cat command to view a document.
Play video starting at ::19 and follow transcript0:19
So let's look at important document.
Play video starting at ::24 and follow transcript0:24
The cat command is similar to the Windows cat command, since it doesn't do a great job at viewing large files. Instead, we use another command, less.
Play video starting at ::40 and follow transcript0:40
Less does a similar thing that more does for Windows, but it has more functionality. Fun fact, there's a Bash command called more, but it's been slowly dying out in favor of less. It's literally a case of less is more. Similar to more, when we use less we're launched into an interactive shell. Some of the most common keys you'll use to navigate this tool are the up and down keys, page up and page down. g, this moves to the beginning of a file. You can see now we're at the beginning. Capital G, this moves to the end of a text file.
Play video starting at :1:16 and follow transcript1:16
Now we're at the end.
Play video starting at :1:18 and follow transcript1:18
Slash and then a word_search. This allows you to search for a word or phrase. If I type in slash then type the word I want to search for, I can scan through the text file for words that match my search.
Play video starting at :1:35 and follow transcript1:35
Q, this allows you to quit out of less and go back to your shell, similar to the q key in the Windows more command. Do you see how less offers functionality like searching within a file?
Play video starting at :1:48 and follow transcript1:48
Less is a great tool to use to view files of any size. You'll no doubt end up using this command often as an IT support specialist. Similar to the Windows cat and head parameter, we can do the same thing in Linux using a command called head.
Play video starting at :2:7 and follow transcript2:07
This will show you, by default, the first ten lines of a file.
Play video starting at :2:11 and follow transcript2:11
Now what if you wanted to view the last few lines of a file? You can use a command called tail.
Play video starting at :2:21 and follow transcript2:21
This will show you, by default, the last ten lines of a file.

> WINDOWS: MODIFYING TEXT FILES 
So far, we've discussed how to read and modify files. But we haven't covered how to edit file contents yet. Spoiler alert, you're about to learn. You can edit text based files in notepad, which we used earlier to view a text file. Notepad is great for basic editing. But when making changes to configuration files, scripts, or other complex text files, you might want something with more features. There are lots of good editors out there for the Windows GUI. For this demonstration, we'll use one called Notepad++. Notepad++, which you can access from the next supplemental reading, is an excellent open source text editor, with support for lots of different file types. Notepad++ can open multiple files and tabs. It also does syntax highlighting for known file types, and has a whole bunch of advanced text editing features. Syntax highlighting is a feature that a lot of text editors provide. It displays text in different colors and fonts to help you categorize things differently. We've already installed Notepad++ on our machine. So, you can check out their website and do the same. Now, you can edit any file using Notepad++ by right clicking it and selecting edit with Notepad++.
Play video starting at :1:23 and follow transcript1:23
What if you wanted to edit a file from the CLI? Unfortunately, there's no good default editor in the Powershell terminal. But we can launch our Notepad++ text editor from the CLI and begin modifying text that way. So start, Notepad++, and then just a filename. As you can see, it opened up Notepad++, and asked if I wanted to create this file. If you'd like to read about text editors that you can specifically use in the CLI, check out the supplemental reading on an advanced text editor called Vim.

> LINUX: MODIFYING TEXT FILES 
In Linux, there are many popular text editors that we can use to modify files. We won't have enough time to cover them all. So let's just focus on one editor that can be found on virtually any distribution, Nano. Nano is an extremely lightweight but useful text editor. We've included it in the supplementary readings after this video, so go check it out. To edit a file in Nano, just type Nano then the file name. Once we do that, we'll be launched into the Nano program. From here, we can start editing content as we normally would with any other text editor. At the bottom of the screen, you'll notice a few options like caret G and caret K. The caret means to use Ctrl-G or Ctrl-K. We won't talk about all these options, but a few that might be useful are Ctrl-G, which helps open up a help page, and Ctrl-X which is used when you want to save your work or exit Nano. Let's go ahead and edit this file, then save our changes.
Play video starting at :1:20 and follow transcript1:20
It's asking me if I want to save the file or exit and discard my changes. I'm just going to hit Y because I want to save them. Once I do that, I'll be exited from Nano. Let's verify we actually changed that file. There it is. Nano is a super useful tool if you need a quick text editor in Linux. But if you want to be a true OS power user, I recommend that you read the supplemental material I've included to learn more about the text editors that are used in the industry, like Vim or Emacs.

> WINDOWS POWERSHELL 
So far in this course we have been using command aliases in PowerShell. PowerShell is a complex and powerful command language, that's also super robust. We've been able to use common aliases, that are exactly the same as their Linux counterparts. But from here on out, we'll need to deploy some advanced command line features, so we'll need to look at real PowerShell commands. You've already seen an example of a real PowerShell command, Get-Help, which is used to see more information about commands. There's another PowerShell command that we can use to look at one of our aliases, that we've been using as our list directory. To see what the actually PowerShell command is that gets executed, we can use the PowerShell command, Get-Alias.
Play video starting at :1: and follow transcript1:00
Interesting when we call LS, we are calling the PowerShell command Get-ChildItem, it gets or lists the children which are the files and sub directories of the given item. Let us actually run this Get-ChildItem command with the item C:\.
Play video starting at :1:22 and follow transcript1:22
You'll see this is the same output as, ls C:\.
Play video starting at :1:31 and follow transcript1:31
Cool. PowerShell commands are very long and descriptive, which makes them easier to understand. But it does mean a lot of extra typing, when you're working interactively at the CLI. Aliases for common commands are a great way to work more quickly in PowerShell.
Play video starting at :1:46 and follow transcript1:46
We've been using them up to this point to help us hit the ground running with the command line. In Windows, you pretty much have three different ways you can execute commands. You can use real PowerShell commands, or the relatable alias names. Another method that we've mentioned, but haven't really talked about yet is cmd.exe commands. Cmd.exe commands are commands from the old MS-DOS days of Windows. But they can still be run do to backwards compatibility. Keep that in mind, that they aren't as powerful as PowerShell commands. An example of a cmd.exe command is dir. Which coincidentally points to the PowerShell command Get-ChildItem, which is also where, ls Alias gets pointed to. Remember the PowerShell command Get-Help, well there's a command parameter that you can use to get help with command.ext commands, /?. Keep the difference in mind, Get-Help is used for PowerShell commands like Get-Help ls, and /?, is used for other commands like dir/?. If I tried to use, ls/?, it will return nothing, because the PowerShell command that ls is an alias of, doesn't know how to handle to the parameter /?, and vice versa. You're free to use whatever commands you feel comfortable with. But in this course we're going to use common aliases, and PowerShell commands.

> WINDOWS: SEARCHING WITHIN FILES 
You've probably had to search for words in a text document before. Whether it was to find and replace words or for something else. Most text editors work the same way when it comes to finding words in the document. All you need to do is Ctrl+F to search for the word. Pretty simple right? But what if you wanted to see if a word existed in multiple files? There are a few ways we can do this. Let's talk about the GUI options and then we'll turn to PowerShell and learn how to search for words from the CLI. Windows has a service called the Windows Search Service. This service indexes files on your computer by looking through them on a schedule. It then compiles a list of names and properties of the file that it finds into a database. This is a time consuming and resource intensive process. So on many Windows Servers, those search service isn't installed or is disabled. On Windows 8 and Windows 10 desktop computers, It's often enabled for files in your home directory, but not for the entire hard drive. By default, the Windows Search Service will let you find files based on their name, path, the last time they were modified, their size, or other details, but by default you can't search for words inside the files. The Windows Search Service can be configured to search file contents and their properties. This increases the amount of time that it takes for the indexer to do its work. It's sort of like the computer is doing all of the searches that you might want to do ahead of time and then you just have to look up the result. Let's configure the service to index file contents and see what it looks like. The settings we're looking for are in the Control Panel, but we can use the Start menu to find the settings we need faster. Open the Start menu and then type indexing.
Play video starting at :1:57 and follow transcript1:57
You'll see the Indexing Options in your results of the search, click on that. Now you want to change the settings for the user folder which is where all the home directories are stored. Select Users and then click Advanced.
Play video starting at :2:19 and follow transcript2:19
Now select the File Types tab, and select Index Properties and File Contents.
Play video starting at :2:32 and follow transcript2:32
Click Okay.
Play video starting at :2:39 and follow transcript2:39
Now close out of the indexing options. When you do this, the Windows Search Service will start to rebuild the index based on your new settings. This could be super fast or could take while. It all depends on how many files you have and how large they are. On this system, I've already let the re-indexing complete. Now I can use Windows Explorer, my home directory, to find files that have a specific word in them.
Play video starting at :3:15 and follow transcript3:15
Let's search for the word cow. The results turn up farm animals and ranch animals dot text. Awesome, we can see the word cow in this text file. If you don't want to use the Windows Search Service, we can also use Notepad++, the editor that we installed in an earlier lesson. From Notepad++, press Ctrl+Shift+F to open the Find in Files dialog.
Play video starting at :3:55 and follow transcript3:55
From here, we can specify what you want to find and what files you want to search. You can limit your search to a specific directory, to a specific set of file extensions and you can even actually replace the word with another one from here. So lets search for the word cow again and this time I'll search on my home directory. Find all, there we go. Now it returns farm animals and ranch animals. If we can't or don't want to use a GUI, we can search for words within files from the command line.
Play video starting at :4:38 and follow transcript4:38
In PowerShell, we're going to use the SLS or Select-String command to find words or other strings of characters and files. You can think of strings as a way for the computer represent text. The Select-String command lets you search for text that matches a pattern you provide. This could be a word, part of a word, a phrase or more complicated patterns that are described using a pattern matching language called Regular Expressions. Keep in mind that this is a really powerful capability that we're just scratching the surface of. So here we're going to search for a word in a file in my home directory. Let's search for the word cow again.
Play video starting at :5:23 and follow transcript5:23
You'll see that Select-String found cow and it tells you the file and the line number where it found it. Excellent, if you wanted to search through several files in a directory, you can use pattern matching to select them. Remember the wildcard character asterisk for selecting all, we can use that here as well.
Play video starting at :5:50 and follow transcript5:50
Now we can see that it found farm animals and ranch animals. Select-String can do lots of other things too. We'll get a chance to see that in later lessons. Being able to find a string in a file or a set of files, it's going to be a critical skill for you on this course and in your IT support work. It's also an important tool that we're going to learn to combine with other tools to do really powerful things from the CLI.

> WINDOWS: SEARCHING WITHIN DIRECTOREIES 
What if we wanted to search for something within a directory, like looking for just the executables in that same directory. This is where the command parameter -filter comes in. I'm just going to LS my programs files here with the -recurse, -filter and look for exes. Well, that's lots of exes. The -filter parameter will filter the results for file names that match a pattern. The Asterisk means match anything. And the.exe Is the file extension for executable files in windows. So the only results we're going to get are the files that end in.exe. Cool.

> LINUX: SEARCHING WITHIN FILES 
In Bash, we can search for words within files that match a certain pattern using the grep command. What if you wanted to know of a certain file existed in a directory or if a word was in a file? Similar to the PowerShell select-string command, we can use the grep command in Bash. Let's search for the word cow in farm animals. You'll see that grep found cow in the text file, farm animals. You can also use grep to search through multiple files. Let's use the asterisk wildcard command here. And you can see that it found cow in farm animals and ranch animals. You'll be using grep a lot throughout this course and in later courses, so it's an important command to remember.

> WINDOWS: INPUT, OUTPUT, AND THE PIPELINE
All right, we've learned a bunch of individual, very powerful tools. These are the most important day-to-day commands that you'll need to work in PowerShell. Now, we're going to learn how to combine these tools to make them even more powerful. Let's run the following command in our desktop directory. Then we'll break it down piece by piece. Scan cd into my desktop directory. Okay, I go woof > dog.txt. Will do an LS to check our desktop, and we'll now see a file called dog.txt. Inside that file, we should see the word, woof. Oh, there it is. What's happening here? Let's take a closer look, echo woof. In PowerShell, the echo is actually an alias for Write-Output. That gives us a clue to what's happening. We know the echo command prints out our keyboard input to the screen. But how does this work? Every Windows process and every PowerShell command can take input and can produce output. To do this, we use something known as I/O streams or input output streams. Each process in Windows has three different streams: standard in, standard out, and standard error. It's helpful to think of these streams like actual water streams in a river. You provide input to a process by adding things to the standard in stream, which flows into the process. When the process creates output, it adds data to the standard out stream, which flows out of the process. At the CLI, the input that you provide through the keyboard goes to the standard in stream of the process that you're interacting with. This happens whether that's PowerShell, a text editor, or anything else. The process then communicates back to you by putting data into the Standard out stream, which the CLI writes out on the screen that you're looking at. Now, what if instead of seeing the output of the command on the screen, we wanted to save it to a file? The greater than symbol is something we call a redirector operator that lets us change where we want our standard output to go. Instead of sending standard out to the screen, we can send a standard out to a file. If the file exists, it'll overwrite it for us. Otherwise, it'll make a new file. If we don't want to overwrite an existing file, there's another redirector operator we can use to append information, greater than, greater than. So let's see that in action, echo woof >> dog.txt. Now, if I look at my dog.txt file again, we can see that woof was added again. But, what if we wanted to send the output of one command to the input of another command? For this, we're going to use the pipe operator. First, let's take a look at what's in this file. cat words.txt. Look at that, it's a list of words. Now, what if we want to just list the words that contain the string st? We can do what we've done before and just use select-string or SLS on the file directly. This time, let's use the pipeline to pass the output of cat to the input of select-string. So cat words.txt | select-string st. And now, we can see a list of words with the string st. To tie things together, we can use output redirection to put our new list into a file. So now, greater than, and then a new file called st words.txt. Now, if I cat st words.txt, yup, there it is. That's just a very basic example of how you can take several simple tools and combine them together to do complex tasks. Okay, now we're going to learn about the last I/O redirector, standard error. Remember when we tried to remove a restricted system file earlier and we got an error that said permission denied? Let's review that once more. This time, I'm going to remove another protected file, rm secure_file. We see errors like we're supposed to. But what if we didn't want to see these errors? Turns out, we can just redirect the output of error messages in a different output stream called standard error. The redirection operator can be used to redirect any of the output streams, but we have to tell which stream to redirect. So, let's type, rm secure_file 2> errors.txt. If I look at errors.txt, I can see the error message that we just got. So, what does the two mean? All of the output streams are numbered. One is for standard out, which is the output that you normally see, and two is for standard error or the error messages. Heads up, PowerShell actually has a few more streams that we aren't going to use in this lesson. But they can be redirected in the same way. You can read more about them in the supplemental reading right after this video. So when we use two greater than, we're telling PowerShell to redirect the standard error stream to the file instead of standard out. What if we don't care about the error messages, but we don't want to put them in a file? Using our newly learned redirector operators, we can actually filter out these error messages. In PowerShell, we can do this by redirecting standard error to $null. What's $null? Well, it's nothing. No, really. It's a special variable that contains the definition of nothing. You can think of it as a black hole for the purposes of redirection. So let's redirect the error messages this time to $null, rm secure_file 2> $null. Now, our output is filtered from error messages. There's still much more to learn if you're interested. Try Get-Help about_redirection in PowerShell to see more detail. It may take a little time to get the hang of using redirector operators. Don't worry, that's totally normal. Once you do start to get used to them, you'll notice your command full skills level up and your job becomes a little easier. Now, let's take a look at output redirection in Linux.

> LINUX: INPUT, OUTPUT, AND THE PIPELINE
Similar to Windows, we have three different I/O or input-output streams: standard out, standard in and standard err. Remember the standard out example in the last lesson? Well, the same concept applies in Linux.
Play video starting at ::32 and follow transcript0:32
We echo the text woof here, but instead of sending it to our screen by default, we're going to redirect the output to a file using the standard out redirector operator. Let's verify and there it is. This overrides any file named dog.text with the content woof. If we don't want to overwrite an existing file, we can use the append operator or greater than greater than. So, echo woof, dog.text. We could verify that. There it is. One redirector operator that we talked about in the Windows lesson, but didn't show an example of, was the standard in redirector operator. The standard in redirector is denoted by a less than sign. Instead of getting input from the keyboard, we can get input from files like this.
Play video starting at :1:25 and follow transcript1:25
This command is exactly the same as cat file_input. The difference here is that we aren't using our keyboard input more, we're using the file as standard in. Finally, similar to Windows, the last redirector operator we'll talk about is standard err. Standard err displays error messages which you can get by using the two greater than, redirector operator. Just like Windows, the two is used to denote standard err. So, to redirect just the error messages of some output, you can use something like this, ls/ dir/ fake_dir 2> error_output.text. Now, if I view that, new document.
Play video starting at :2:13 and follow transcript2:13
Now, we can see the error message in error output.text. Remember the dollar sign null variable that we used in Windows to toss unwanted output into a metaphorical black hole? We have something like that in Linux too. There's a special file in Linux called the /dev/null file. Let's say we want to filter out the error messages in a file and just want to see standard out messages. We could do something like this.
Play video starting at :2:44 and follow transcript2:44
Now, our output is filtered from error messages. Remember how we talked about taking the output of one command and using it as the input of another command, with the Windows pipeline? Well, the same thing exists in Linux. The pipe command allows us to do this. Let's say we want to see which sub-directories in the slash etc directory contain the word Bluetooth. We can do something like this.
Play video starting at :3:13 and follow transcript3:13
We're using the pipe redirector to take the output of ls-la/etc and pipe or send it to the grep command. Now, without even looking through the directory, we're able to quickly see if the Bluetooth directory is in here. There it is. You've gotten a glimpse of the power of redirectors and as you dive deeper into the world of Linux, you'll be using them at regular basis. They're super valuable tools to have and now, they're part of your toolkit.

> WINDOWS AND LINUX ADVANCED NAVIGATION 
You've learned a lot of commands and tools to help lay a strong foundation for IT support work. There are many other commands that you haven't seen yet. Don't worry, we'll get to them as they come up. As you advance in your career, you might even discover that the tools and commands you're using aren't powerful or efficient enough anymore. Maybe you'll want to search through files using more complex patterns. To do that, you'll need to know about tools like regular expressions. Regular expressions are used to help you do advance pattern based selection. There's also so much more to power shell. There are excellent videos and articles that can guide you from the first steps you've learned here to being a Windows CLI master. If this sounds interesting to you, we really encourage you to check out the supplementary reading right after this video. And no, we won't grade you on your knowledge of this material in these courses, but it could be really useful to you in the IT support field. You've done some seriously awesome work. We've covered a lot of information in this lesson. Maybe this was the first time you've been exposed to Linux or Windows. If so, you've already passed a huge milestone in your learning journey. It's super important that you're able to use the commands you learned here by memory. I hope you wrote them down in your notes while watching the videos in this course. Next up, we'll be testing you on some of the new commands you learned in Bash and Windows CLI. Make sure to re-watch the videos and practice the exercises, if you want a refresher before you start. When you're ready, we'll see you in the next lesson.


