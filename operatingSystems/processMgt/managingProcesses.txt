> WINDOWS: READING PROCESS INFORMATION 
It might feel like we're starting to get into the weeds here. So let's take a step back and think about what processes really are and what they represent in the context of an operating system. You can think of processes as programs in motion. Consider all the code for your Internet browser. It sits there on your hard drive quietly waiting for its time to shine. Once you start it up, the operating system takes that resting code then turns it into a running, responding, working application. In other words, it becomes a process. You interact with launch and halt processes all the time on computers, although the OS usually takes care of all that behind the scenes. By learning about processes, you're taking a peek behind the curtain at how operating systems really work. This knowledge is both fascinating and powerful, especially when applied by a savvy IT support specialist to solve problems. Keep all that in mind as we take a look at how you can pull back the curtain even further. Next, we'll learn about the different ways you can investigate which processes are running on a Windows computer and more methods of interacting with them. On the Windows operating system, the task manager or task mgr.exe is one method of obtaining process information. You can open it with the control shift escape key combination or by locating it using the start menu.
Play video starting at :1:39 and follow transcript1:39
If you click on the processes tab, you should see a list of the processes that the current user is running along with a few of the system level processes that the user can see. Information about each process is broken out into columns in the task manager. The task manager tells you what application or image the process is running along with the user who launched it and the CPU or memory resources it's using. To kill a process, you can select any of the process rows and click the end task button in the lower right corner. We can demonstrate this by launching another notepad.exe process from the command line, then switching over to the task manager, selecting the notepad.exe process and ending it. I already have Notepad open so I'm going to click on it, click end task. In an earlier lesson, we talked about starting and ending Windows processes. Remember that we used the task kill command to stop a process by its identification number or PID. So how do we get that PID number? While in task manager, you can click on the details menu option and here, you can see a whole bunch of other information you can get the task manager to display, including the PID. You can also see this information from both a command prompt and PowerShell. From the command prompt, you can use utility called TaskList to show all the running processes.
Play video starting at :3:13 and follow transcript3:13
From a PowerShell prompt, you can use a Commandlet called Get-Process to do the same.
Play video starting at :3:26 and follow transcript3:26
There are lots of ways you can get process information from the Windows operating system. We've included links to the documentation of both TaskList and Get-Process in the supplementary reading in case you want to dive deeper into either of these tools.

> LINUX: READING PROCESS INFORMATION 
Okay, now let's talk about how to view the processes running on our system in Linux. We'll be using the ps command, so let's just go ahead and run that command with the dash X flag, and see what happens.
Play video starting at ::29 and follow transcript0:29
This shows you a snapshot of the current processes you have running on your system. The ps output can be overwhelming to look at at first, but don't worry, we'll walk through how to read this output.
Play video starting at ::40 and follow transcript0:40
Let's start from right to left here. P-I-D or PID is the process ID, remember processes get a unique ID when they're launched. TTY, this is the terminal associated with the process, we won't talk about this field but you can read more about it in the manpages linked right after this video. STAT this is the process status, if you see an R here it means the process is running or it's waiting to run. Another common status you'll see is T for stopped, meaning a process that's been suspended.
Play video starting at :1:11 and follow transcript1:11
Another one you might see is an S for interruptible sleep, meaning the task is waiting for an event to complete before it resumes.
Play video starting at :1:20 and follow transcript1:20
You can read more about the other types of process statuses in the manpages.
Play video starting at :1:25 and follow transcript1:25
TIME, this is the total CPU time that the process has taken up.
Play video starting at :1:29 and follow transcript1:29
And lastly, command, this is the name of the command we're running. Okay, now we're going to enter hard mode here. Run this command, PS-EF. The E flag is used to get all processes, even the ones run by other users. The dash F flag is for full, which shows you full details about a process.
Play video starting at :1:51 and follow transcript1:51
Look at that, we have more processes and even more process details. Let's break this down.
Play video starting at :2:1 and follow transcript2:01
UID is the user ID of the person who launched the process. PID is the process ID, and PPID is the parent ID that we discussed in earlier lesson which launched the process. C is the number of children processes that this process has. STime is the start time of the process. TTY is the terminal associated with the process.
Play video starting at :2:24 and follow transcript2:24
TIME is the total CPU time that the process has taken up.
Play video starting at :2:28 and follow transcript2:28
And CMD or command is the name of the command that we're running. What if we wanted to search through this output? It's super messy right now, can you think of a way we can see if a process is running? That's right, with the grep command, I told you we were going to use it all the time.
Play video starting at :2:49 and follow transcript2:49
This will give us a list of process that have the name Chrome in them. There's another way to view process information, remember everything in Linux has a file, even processes. To view the files that correspond to processes we can look into slash proc directory.
Play video starting at :3:11 and follow transcript3:11
There are a lot of directories here for every process that's running. If you looked inside of one of the subdirectories it'll give you even more information about the process. Let's look at a sample process file for PID 1805.
Play video starting at :3:38 and follow transcript3:38
This tells us even more information about a process state than what we saw in PS. While the slash proc directory is interesting to look at, it's not very practical when we need to troubleshoot issues with processes. For now stick with the PS-EF command to look at process information. As you can see, we can learn a lot about the processes running on our machine with just a few key strokes. In an upcoming lesson we'll talk about how to use process information to our benefit when figuring out which processes are taking up too many resources. For now, feel free to learn a little more about the processes that you're running, I'll be waiting for you in the next video.

> WINDOWS: SIGNALS 
Imagine you're starting up a video game that's taking a while to render its graphics. You decide that you don't want to play anymore, which leaves you with a few options. You can wait for it to finish loading and then quit the game from the menu, or you can interrupt the process altogether, telling it to quit at the system level. This is just one example of a time you might find yourself wanting to close a process before it fully completes. To tell a process to quit at the system level, we use something called a signal. A signal is a way to tell a process that something's just happened. You can generate a signal with special characters on your keyboard and through other processes and software. One of the most common signals you'll come across is called SIGINT, which stands for signal interrupt. You can send this signal to a running process with the CTRL+C key combination. Let's say you start up the DiskPart tool we looked at in our discussion on partition formatting. I'm just going to open up command prompt and then launch DiskPart.
Play video starting at :1:17 and follow transcript1:17
If you decide you don't want to actually format any disks, you can hold down the CTRL key and press C at the same time to send the SIGINT signal to the DiskPart process.
Play video starting at :1:30 and follow transcript1:30
You'll see that the window that the DiskPart program was running in closes and the process terminates. There are a few other Windows signals that processes can send and receive. But unlike in Linux, there isn't an easy way for an end user to issue arbitrary signal commands. If you're interested in learning more about Windows signals, check out the signal reference link in the supplementary reading.

> LINUX: SIGNALS 
In Linux, there are lots of signals that we can send the processes. These signals are labeled with names starting with sig. Remember the sigint signal, we talked about before. You can use sigint to interrupted process and the default action of this signal is to terminate the process that's interrupting. This is true for Linux 2. You can send a sigint signal through the keyboard combination Ctrl+C. Let's see this in action. I'm going to do the same thing as we did in Windows and start a program like sudo parted.
Play video starting at ::47 and follow transcript0:47
We can see that we're in the parted tool now. Let's interrupt his tool and say we want it to abort the process with the Ctrl+C keyboard combination.
Play video starting at ::58 and follow transcript0:58
Now, we can see that the process closed and we're back in our shell. We were able to interrupt our process midway and terminate it. Success. There are lots of signals used in Linux, and we'll talk about the most common ones in the upcoming lessons.

> WINDOWS: MANAGING PROCESSES 
In earlier lessons, we talked about processes. We saw some examples of how to manipulate them with signals. Let's expand on that idea, Process Management, by looking at some of the things you can do to manipulate processes. In Windows, we've looked up programs like Task Manager, the PowerShell command like Get-Desk process, and the Task close utility, to name a few. We've also seen how to send a running processor signal through Control C, but there's another Process Management tool we haven't talked about which lets you do things like restart or even pause processes. This tool is called Process Explorer. Process Explorer is a utility Microsoft created let IT support specialists, systems administrators, and other users look at running processes. Although it doesn't come built into the Windows operating system, you can download it from the Microsoft website which I've linked to in the supplemental reading right after this video. Once you've downloaded Process Explorer and started it up, you'll be presented with a view of the currently active processes in the top window pane. You'll also see a list of the files a selective process is using in the bottom window pane. This can be super handy if you need to figure out which processes use a certain file, or if you want to get insight into exactly what the process is doing, and how it works. You can search for a process easily in Process Explorer by either pressing Control F, or clicking on the little binocular button. Let's go ahead and do a search for the notepad process we opened up earlier. You should see C\Windows\System32\notepad.exe listed as one of the search results. If you see something that says notepad.exe.mui, don't worry. MUI stands for multilingual user interface, and it contains a package of features to support different languages. Anyways, once you've located the notepad.exe process, notice how it's nested under the command.exe process in the UI.
Play video starting at :2:32 and follow transcript2:32
This indicates that it's a child process of command.exe. If you right-click on the notepad.exe process, you'll be given a list of different options that you can use to manage the process. Check out the ones that say Kill Process, Kill Process Tree, Restart, and Suspend. Kill Process is what you might expect. Say goodbye to notepad. Kill Process Tree does a little bit more. It'll kill the process and all of its descendants. So, any child process started from it will be stopped. Kill Process Tree takes no prisoners. Restart is another interesting option. You might be able to guess what it does just by its name. It will stop and start the process again. Let's do that with the notepad.exe process. We started from command.exe. Interesting. After the restart, notepad.exe doesn't appear as a child of command.exe anymore. What gives? Well, if you'll search for notepad.exe again, we can see it's been restarted as a child of the procexp.exe process. This is the process name for Process Explorer. This makes sense since Process Explorer was a process in charge of starting it again after we terminated it. But what about the Suspend option? Instead of killing a process, you can use this option to suspend it and potentially continue it at a later time. If we right-click, suspend the process, we'll see that in the CPU column, the process explorer output, the word suspended appears.
Play video starting at :4:27 and follow transcript4:27
While a process is suspended, it doesn't consume the resources it did when it was active. We can kick it off again by right-clicking and selecting the Resume option.
Play video starting at :4:41 and follow transcript4:41
Process Explorer can do a lot, and we'll take a look at some of the monitoring information it can give us in an upcoming lesson. We won't get into the details of all its features though. So, if you're curious, you can check out the documentation on Microsoft's website. We put a link to it for you and the supplementary reading.

> LINUX: MANAGING PROCESSES 
Let's talk about how to use signals to manage processes in Linux. First up, terminating processes. We can terminate a process using the kill command. It might sound a bit morbid, but that's just how it is in the dog-eat-dog world of terminating processes. The kill command without any flags sends a termination signal or SIGTERM. This will kill the process, but it'll give it some time to clean up the resources it was using. If you don't give the process a chance to clean up some of the files it was working with, it could cause file corruption. I'm going to keep a process window open so you can see how our processes get affected as we run these commands.
Play video starting at ::54 and follow transcript0:54
So, to terminate a process we'll used to kill command along with the PID of the process we want to terminate. Let's just go ahead and kill this Firefox process.
Play video starting at :1:14 and follow transcript1:14
And if we check the process window, we can see that the process is no longer running. The other signal that you might see pop up every now and then is the SIGKILL signal. This will kill your process with a lot of metaphorical fire. Using a SIGTERM is like telling your process, ''Hey there process, I don't really need you to complete right now, so could you just stop what you're doing?'' And using SIGKILL is basically telling your process, ''OK, it's time to die.'' The signal does its very best to make sure your process absolutely gets terminated and will kill it without giving it time to clean up. To send a SIGKILL signal, you can add a flag to the kill command dash kill for SIGKILL. So, let's open up Firefox one more time. So, kill dash kill 10392,
Play video starting at :2:21 and follow transcript2:21
and now you can see that Firefox has been killed. These are the two most common ways to terminate a process. But it's important to call out that using kill dash kill is a last resort to terminating a process. Since it doesn't do any cleanup, you could end up doing more harm to your files than good. Let's say you had a process running that you didn't want to terminate but maybe you just want to put it on pause. You can do this by sending the SIGTSTP signal for terminal stop, which will put your process in a suspended state. To send this, you can use the kill command with the flag dash TSTP. I'm going to run PS dash X so you can see the status of the processes. We're just going to put this process in a suspended state. So, kill dash TSTP. Now you can see the process 10754 is now in a suspended state. You can also send the SIGTSTP signal using the keyboard combination, Control Z. To resume the execution of the process, you can use the SIGCONT for continued signal. Let's go and look at the process table again. I'm going to go ahead and use that command on this process.
Play video starting at :3:51 and follow transcript3:51
Now, if I look at the process again, you'll see that the process status turned from a T to an S. SIGTERM, SIGKILL, and SIGSTP are some of the most common signals you'll see when you're working with processes in Linux. Now that you have a grasp on these signals, let's use them to help us utilize hardware resources better.

> MOBILE APP MANAGEMENT 
In mobile operating systems like iOS and Android, you won't be able to see a list of running processes. Instead, you'll manage mobile apps that are running on the OS. When a mobile app is running, there will be one or more processes associated with them, but those details will be managed by the OS. Let's take a look at how you can manage your running mobile apps and understand how they're using your mobile device's resources. As an IT support specialist, you may help end users to troubleshoot slow mobile devices and manage their mobile apps. We'll show you examples of what you might see, but you may have to refer to your device's documentation if it doesn't look like these examples. First, let's check what apps are currently running on a device by opening the app switcher in iOS. From the app switcher, I can see a list of apps running on this iPhone. Now let's do the same thing in Android. Great, each of the apps that I have launched is listed here. I can scroll through this list and switch to an app by tapping it. Now I can use this calculator. The app that we're using is called the foreground app. All of these other apps are in the background. What do you think is happening with the background apps while I'm calculating how many bits are in this megabyte? The details can be a little complicated, but the basic idea is this, as soon as it can, the OS will suspend background mobile apps. A suspended app is paused, but not closed. The OS can occasionally wake a backgrounded app to allow to do some work, but it will try to keep apps suspended as much as it can. Let's go back to the home screen. Now that I'm on the home screen, all of the apps are backgrounded and there are no foreground apps. The calculator hasn't been closed. Each new app that you open will be kept backgrounded and usually suspended. This helps the device use less battery power. And pro tip, as an IT support specialist, it's pretty helpful to learn which apps on your mobile device use the most battery power. If you have an app that the OS can't suspend because the app keeps working in the background or it's frozen, then that can slow your device and use up battery. IT support specialists often have to find these misbehaving apps and close or uninstall them. Let's try closing some of the apps. From the iOS app switcher, we can swipe up on any of the background apps, this will close the app. You can do the same thing in Android. In this version of Android, we can also swipe over here and hit Clear all to close all of the apps at once. You can troubleshoot a misbehaving app by closing apps one at a time and seeing if there is one app in particular that slows the device down. Sometimes closing a misbehaving app will be all you need to do to make your device run smoothly again. Start with the app that's currently being used and see if that helps. The app switcher shows you the apps in order from most recently used to least recently used. Work backwards through time, trying one app at a time. Remember that this is not something that you should have to do very often to make your device work properly. With current versions of iOS and Android, you shouldn't ever have to close an app for performance reasons, unless the app is misbehaving. It can actually use up more battery to close and reopen an app than it would if you had just left it running. If you discover that you have an app that's routinely misbehaving, you can try resetting it completely by clearing its cache, like we saw in an earlier video. If the device is still running sluggishly after closing all of the apps, the next thing to try is to simply restart the device. And if restarting the device doesn't fix the performance issues or it's only a temporary fix, then we need to dig deeper. Let's check the battery use of the apps that we've installed. On the iPhone, I go to the Settings app > Battery > Battery Health. Here I can see how quickly the battery's been used since the last charge. I can also see which apps are using the most battery. Let's look at the same settings in Android. Again, I go to the Settings app, and from here, I'll choose Battery > More > Battery usage. From here, I can see which apps are using the most battery. If I see an app that's using a lot of battery, then it might not be working as it should, or maybe it's an app that uses a lot of battery to work. You'll need to learn which apps the end user needs to know whether or not the battery use is unusual.

