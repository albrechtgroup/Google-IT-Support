> WINDOWS: PACKAGE MANAGER 
Now that we know a bit about installing software and dependencies from individual executables or package files, let's take a look at a different way to manage software installations using tools called package managers. You've actually already seen a package manager in action. Remember the apt or advanced package tool we talked about in earlier video? Well, the advanced package tool is actually a package manager for the Ubuntu operating system. We'll talk about apt in a little bit. But you might be curious about what options you have for Windows package management. A package manager makes sure that the process of software installation, removal, update, and dependency management is as easy and automatic as possible. Think about the normal way you might install a new program on your Windows computer. You might search for it in a search engine, go to the program's website, download the installer, then run it. If you wanted to update the software, you might open up the program and use whatever mechanism it provides for you to install the new version. Lots of programs give you a way to perform automatic updates and Microsoft takes care of the ones it writes through Windows update. But you might even need to go back to the website you downloaded the software from originally to grab another installer for the new version. Finally, if you wanted to remove the software, you might use the windows Add/Remove programs utility. Or maybe run a custom uninstaller if it provides you with one. Some installation technologies like the Windows installer can take care of dependency management. But they don't do much to help you install software from a central catalog of programs or perform automatic updates. This is where a package manager like Chocolatey can come in handy. Chocolatey is a third party package manager for Windows. This means it's not written by Microsoft. It lets you install Windows applications from the command line. Chocolatey is built on some existing Windows technologies like PowerShell, and lets you install any package or software that exists in the public Chocolatey repository. I've included links to both in the next reading. You can add any software that might be missing to the public repository. You can even create your own private repository if you need to package something like an internal company application. Configuration management tools like SCCM and Puppet, even integrate with Choclatey. That helps make managing deployments of software to the Windows computers in your company, automatic and simple. We've talked about a few ways we can install packages in earlier videos. Let's add Chocolatey to the mix, which supports several methods of software installation itself. First, you can install the Choclatey command line tool and run it directly from your PowerShell CLI. Or you can use the package management feature that was recently released for PowerShell. Just specify that the source of the package should be the Choclatey repository. Remember this from our talk about installing software? We use this command to locate the Windows Sysinternals package after adding Choclatey as a software source. Just a refresher, the command was Find-package sysinternals include dependencies. That's all well and good. But how do we actually go about installing this package? Well, that's where the Install-Package command-let comes into play. We can use this tool to install a piece of software and its dependencies. Let's get installing that sysinternals package we found earlier shot. I'm just going to go install, package-name sysinternals. Yep, I'm just going to confirm. And just like that, we've got our package. We can verify it's in place with the Get-Package command-let. Get-Package -name sysinternals. You can also uninstall a package using the Uninstall-Package -Name sysinternals.

> LINUX: PACKAGE MANAGER 
Okay. Now, to talk about the package manager used in Ubuntu called the APT or Advanced Package Tool. We've actually already used APT in an earlier course, so hopefully, this won't look new. The APT package manager is used to extend the functionality of the package. It makes package installation a lot easier. It installs package dependencies for us, makes it easier for us to find packages that we can install, cleans up packages we don't need, and more. Let's see how we will install the open source graphical editor, Gimp, using APT. And if you want to follow along on your own machine, I've included a link to the Gimp download in the next reading. So, sudo apt install gimp. Let's take a look at what this command is doing. APT grabs the dependencies that this package requires automatically and asks us if we want to install it. You can see this line here, 0 upgraded, 18 newly installed, 0 to remove, and 16 not upgraded. This gives us a good overview of what we're doing to the packages on our machine.
Play video starting at :1:30 and follow transcript1:30
Now, let' s remove this package. It's sudo APT remove gimp.
Play video starting at :1:43 and follow transcript1:43
You can see that it removes dependencies for us that we're not using anymore because we don't need Gimp. You also noticed that when installing this package, we didn't have to download the gimp package. It was just on our system. How is that possible? Well, thanks to something known as a package repository, we don't have to manually search for each and every software we want online. We've already seen the chocolatey package repository in action. Repositories are servers that act like a central storage location for packages. Lots of software developers and organizations host their software on the internet, and give out a link to where that location is. You can add that link to your own machine, so it references that package or list of packages. You've already seen this with The Register-PackageSource commandlet where we added this location of the chocolatey repository. So on Linux, where do you add a package or repository link? The repository source file in Ubuntu the /etc/APT/sources.list. Your computer doesn't know where to check for software if you don't explicitly add the package or repository links to this file. Let's just open this up real quick and take a peek.
Play video starting at :3:3 and follow transcript3:03
There's some extra information in here that isn't important. But you can see here that there are links here. If you navigate to those links, you'll see a directory that holds lots of packages. Ubuntu already includes several repository sources in here to help you install the base operating system packages, and other tools too. If you work in a Linux environment, there are also special repositories called PPAs or personal package archives.
Play video starting at :3:36 and follow transcript3:36
PPAs are hosted on Launchpad servers. Launchpad is a website owned by the organization, Canonical Limited. It allows open source software developers to develop, maintain, and distribute software. You can add PPAs like you would a regular repository link, but be a little careful when using a PPA instead of the original developer's repositories. PPA software isn't as vetted as repositories you might find from reputable sources like Ubuntu. They can sometimes contain defective, or even malicious software. One more thing to call out about repositories is that the repository managers update their software pretty regularly. If you want to get the latest package updates, you should update your package repositories with the APT update, and then, APT upgrade commands. The APT update command updates the list of packages in your repositories, so you get the latest software available. But it won't install or upgrade packages for you. Instead, once you have an updated list of packages, you can use APT upgrade, and it will install any outdated packages for you automatically. Before installing new software, it's good to run APT update to make sure you're getting the most up-to-date software in your repositories.
Play video starting at :4:58 and follow transcript4:58
You'll also want to run APT upgrade to install any available updated packages on your machine.
Play video starting at :5:13 and follow transcript5:13
You can use the apt--help command to learn more about the commands available with APT. We won't cover them all, but you can list packages, search packages, get more information about packages, and more. There are lots of different package managers you can use with Ubuntu. We chose APT because it's a popular package manager, but you can read up on an alternative package manager in Ubuntu, in the next supplemental reading. Awesome. Now that you've entered the APT command to your toolkit, your ready to maintain packages in Linux. This is a skill you'll be using a whole lot in the IT support world. We'll talk about that more in the next lesson.

