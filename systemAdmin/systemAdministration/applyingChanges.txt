> GREAT POWER = GREAT RESPONSIBILITY 
When you have administrative rights for something, whether it's one machine, a fleet of 100 machines, or a cloud service with thousands of users, you need to be careful that you use these rights responsibility. The most important thing is to avoid using administrator rights for tasks that don't require them. For example, you shouldn't browse the web as an administrator user. Try to minimize the time spent in an administrative session. Do whatever you need to do, and once you're done close the session. In Linux systems, we usually use the pseudo command to execute commands as an administrator. When you execute pseudo for the first time in a machine, you get a message like this. These principles apply to any administrator rights regardless of the operating system or service you're in charge of. Let's take a deeper dive into what this all means. Respect the privacy of others. Don't use your administrator rights to access private information that you have no business accessing. Having file system access to the information stored in a user's home directory doesn't mean you should be looking at their personal files. Being an administrator of an email server doesn't mean you should read someone else's email. Just because you can doesn't mean you should. Even if you have a business reason to access a certain piece of information, make sure you follow the appropriate process or policies to access it. You shouldn't use your administrator rights to bypass any rules. Think before you type. When you use your administrator rights, your actions can have much greater consequences than you when you're acting as a normal user. Think through what you're doing and don't rush. Mistakes like deleting the wrong set of files, rebooting the wrong machine, or breaking the connection that you're using to manage a remote machine can all happen if you're not careful. You can train yourself to do this by writing out the steps you plan to take before doing them. This helps in two ways. It allows you to plan ahead and serves as documentation of what you did. Documenting what you did is crucial when using administrator rights. Listing the commands you executed let's you repeat the same exact process in the future and fix any problems that may come up later. In Linux, there's a command called script. We can use it to record a group of commands as they're being issued along their output. In Windows Power-Shell, there's an equivalent command called Start-Transcript. The output of these tools is useful for automating procedures. Similarly, we can use the recordMyDesktop tool to record the interaction with the graphical application. We put information about these tools in the next supplemental reading. The last of the pseudo-command principle is, with great power comes great responsibility. It's a little cheeky but the point is serious. The more you can do with your administrator rights, the more you can mess up. You can minimize the impact of any mistake, and some mistakes are inevitable, by making sure you can quickly revert your changes if something goes wrong. You can do this by making a copy of the state before changing it. By keeping your configuration in a version control system or by documenting what steps you needed to take in order to go back to the previous state. Reverting to the previous state is called a rollback. Some commands are easy to roll back than others. For example, if you change a configuration setting from true to false, the rollback is to set it back to true. But if you're deleting a file in a way that it doesn't keep a backup copy, the rollback could be tough or even impossible. So, before you make a change, take a moment to think about what all that would look like and make sure you have copies of any information that could be lost.

> NEVER TEST IN PRODUCTION 
Let's start by defining what we mean by production. In an infrastructure context, we call the parts of the infrastructure where certain services are executed and serve to its users production. If you host a website, the service that deliver the website content to the users are the production servers. Inside your company, the servers that validate users' passwords are the production authentication servers. You get the idea. So let's say, you need to make an important change in your production infrastructure. It could be adding a new service, changing the configuration of an existing service, updating the operating system or maybe shutting down the service that's currently running. How do you go about doing that? The key to safely making these changes is to always run them through a test environment first. The test environment is usually a virtual machine running the same configuration as a production environment, but isn't actually serving any users of the service? This way, if there's a problem when deploying the change, you'll be able to fix it without the user seeing it. If you're in charge of an important service that you need to keep running during a configuration change, we recommend that you have a secondary or a stand-by machine. This machine will be exactly the same as a production machine, but won't receive any traffic from actual users until you enable it to do so. In this case, once you've tested your changes in the test environment and are ready to deploy them to production, first, apply the changes to the secondary machine. Once the changes have been applied, make the stand-by machine and primary machine, and then apply the changes to the other machine. For even bigger services, when you have lots of servers providing the service, you may want to have canaries. Similar to the canary of coal miners carry to detect toxic gases when entering the mines, you'll use a small group of servers to detect any potential issues in the larger changes you want to push out in the system. Once you verify that it works correctly on those machines, you then deploy the change to the rest of the fleet. That way, if there's an issue with the change, only a subset of the users get exposed to it, and you can roll it back before it hits everyone. Now, let's say you need to make a minor change in your production infrastructure; should you just go ahead and make the change in production? No, you should always try it in your test infrastructure first. It doesn't matter how minor the change may seem; there's always something that could go wrong. Whether the infrastructure needs primary and secondary machines or a group of canaries depends on how big the services and how important it is that it doesn't go down. Even for the smallest services, you should never make changes directly in production. Always use a test instance first and only deploy the change to production after verifying that it works.

> ASSESSING RISK 
We've mentioned before that you should always test your changes before deploying. Document what you do and have a way to revert to the previous state. The amount of time and effort you invest in each of these steps depends on the risk involved. You should always have a test instance for trying out changes. But it might not be worth having a secondary server if nobody cares about downtime. So, how do you decide how much time and effort to invest? We can assess the risk involved by considering how important the services to the infrastructure and how many users would be impacted if the service went down. Certain services are mission critical. If the centralized authentication system is down, no one will ever be able to log in. If the billing system is unreachable, the company won't be able to receive payments. If your backups are lost, you have no safeguards in the event of a disaster. But not all services are mission critical. An informational website isn't as critical as an e-commerce site. An internal ticket system isn't as critical as an external customer support application. The infrastructure needed for a new installation isn't as critical as the one used for logging into existing machines. In general, the more users your service reaches, the more you'll want to ensure that changes aren't disruptive. The more important your service is to your company's operations, the more you'll work to keep the service up. You may have a user agreement about the expectation of a service availability. For example, in lots of companies, disruptive maintenance is performed on the weekend. In these cases, it's agreed that it's fine if the main file server is down on Saturday while you make any changes. You can also use these criteria to establish priorities for fixing a problem. If the problem is preventing people from doing their work, finding a solution to it should have a higher priority than solving a minor annoyance that can be worked around.

> FIXING THINGS THE RIGHT WAY 
As an IT support specialist, you will often be in charge of fixing problems. The problem could be in a user's computer, a server in your own infrastructure, a piece of code running in the cloud or somewhere in between. So how do you go about fixing it? Let's say you're dealing with a problem, either because you found it or someone reported it to you. Before you start fixing it, make sure you can recreate the error as you'll want to test your solution to make sure the problem is gone after you apply the fix. This is called a Reproduction case. And means you're creating a roadmap to retrace the steps that led the user to an unexpected outcome. Like reaching an error page.
Play video starting at ::51 and follow transcript0:51
When looking for a reproduction case, there are three questions you'll need to answer. What steps did you take to get to this point? What's the unexpected or bad result? And what's the expected result?
Play video starting at :1:4 and follow transcript1:04
Let's say that you're trying to fix a problem where a user can't access a website page. Their reproduction case would be navigating to the failing site with a web browser. The bad result is an error page, where the expected result is a visible website. Once you have the steps you need to recreate the unexpected result, and you know what the right result should be, you can try to fix the underlying issue. Remember, always do this in your test instance, never in production. Make sure you document all your steps and any findings. Having this documentation may prove invaluable if you ever have to deal with similar issues again. Your future self will thank you. After applying your fix, retrace the same steps that took you to the bad experience. If your fix worked, the expected experience should now take place. For our page example, you can verify your solution by visiting the site. Once you've applied the necessary fix, you should see the website content, instead of the error page.
Play video starting at :2:3 and follow transcript2:03
Wow, we've come a long way and covered lots of different aspects of the responsibilities of a sysadmin, including how to apply changes safely with the right amount of effort. Next, you will practice these concepts using Qwiklabs. Then in the next module, we'll talk about the technical details of the infrastructure services used in IT. See you there.

