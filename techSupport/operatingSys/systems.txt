> REMOTE CONNECTION and SSH 
In this lesson, we're going to talk about an important part of computing that makes working in IT support a little easier. Actually, it makes things a lot easier for just about anyone. Picture this, you're on your way to an important meeting. You've been rehearsing for this presentation all week and now you're ready to show the big wigs what you got. But wait, the slide deck, where is it? It's not on your laptop, what could it be? It turns out you forgot your only copy on your desktop at home. It's too late now to turn around and get it, so you sit there dreading the inevitable. But wait a minute, suddenly, you remember that you will have a remote connection setup from your laptop to your desktop. You use this connection to log into your computer at home, and just as if you are sitting at home, you're able to grab the file from your desktop and copy it to your laptop. You then proceed to give one amazing presentation. Consider another scenario, you bought a computer at a store and you're having a lot of issues with it. Store has a computer help desk that can help you with issues, but it's after hours and a store is closed, you really need to get your computer issue fixed. So what are your options? Fortunately, the store provides 24/7 tech support online. Now, instead of waiting until a physical store is open again, you can reach a tech online and have them help you with your issue through a remote connection. Remote connection makes working in an IT support role much easier since it allows us to manage multiple machines from anywhere in the world. In this lesson, we're going to learn about remote connection. SSH or secure shell is a protocol implemented by other programs to securely access one computer from another. To use SSH, you need to have an SSH client installed on the computer you're connecting from along with an SSH server on the computer you're trying to connect to. Keep in mind that when we say SSH server, we don't mean another physical machine that serves a data. An SSH server is just software. On the remote machine, the SSH server is running as a background process. It constantly checks if a client is trying to connect to it, then will authenticate its requests. The most popular program to use SSH within Linux is the OpenSSH program. We'll talk about how to use SSH from a Windows machine using the popular Open Source program PuTTY. For now, let's just talk about what happens when you use SSH. We're going to show you an example of SSH into a remote machine. So first things first, to login to a remote machine, we have to have an account on that computer. We also need the host name or IP address of that computer. Let's test this, SSH cindy@ IP address.
Play video starting at :2:48 and follow transcript2:48
We get this message, the authenticity of host and then the IP address can't be established. This message is just saying we've never connected to this machine before, and our SSH client can't really verify or connecting to a machine we want to connect to. But we can verify this is the right machine, so let's just go ahead and type yes.
Play video starting at :3:19 and follow transcript3:19
Now, this host gets saved to the computer as a known host, so we won't get this message again when we try to login to it. Now that we're connected through SSH, any of the text commands that we type are sent securely to the SSH server. From here, you can even launch an application, they'll let you see a GUI instead of working directly in the shell. You can read more about how to do that in the supplemental reading. We can connect to SSH using passwords as you saw earlier. This way of authenticating to remote machine is pretty standard, but it's not super secure. The alternative is using an SSH authentication key. SSH keys come in a set of two keys called private and public keys. You can think of them as actual physical keys to a special safe. You can use one key to lock the safe, but it won't unlock it. The other key can then only unlock the safe, but not lock it. That's basically how public and private keys work. You can lock something with the public key, but you can only unlock it with a private key and vice versa. This ensures that whatever is in the safe is available to only those with the public and private keys. You'll learn about the technical details of public and private keys in our IT security course. Don't worry if this doesn't make sense right now, it will. That's basically how SSH works. Not too scary, right? Another way that you can connect securely to remote machine is through VPN. A VPN is a virtual private network. It allows you to connect to a private network like your work network over the Internet. Think of it as a more sophisticated SSH with a lot more setup. It allows you to access resources like shared file servers and network devices as if you are connected to your work network. Spoiller we'll also touch upon the technical details behind VPN in the IT security course. We've covered a lot about remote connections and how they work. We'll talk more about the popular remote connection programs for Windows and Linux, and how to set them up in the system administration course.

> REMOTE CONNECTION ON WINDOWS 
The ability to make remote connections is equally useful on Windows computers. PuTTY is a free, open source software that you can use to make remote connections through several network protocols including SSH. You can visit PuTTY website to download the entire software package with a Microsoft installer. Those are the MSI files we talked about earlier, or you can choose a specific executable which provides the functionality or after like PuTTY.EXE. The PuTTY downloads page is linked in the next supplemental reading in case you want to check it out. Once you've downloaded and installed PuTTY, you can use it by launching the GUI.
Play video starting at ::40 and follow transcript0:40
A window will appear showing you the basic options for your connection. Make a note of the hostname, port, and connection type options. By default, the port is set to 22, which is the default port the SSH protocol uses, and the connection type is set to SSH. All you need to do is type in the host name or IP address of the computer you want to connect to.
Play video starting at :1:6 and follow transcript1:06
Then, click Open to start up a new SSH session,
Play video starting at :1:18 and follow transcript1:18
and now I've SSH into a remote computer. Running PuTTY from the GUI isn't your only option. You could also use it on the command line. Open up PowerShell prompt and type out the application name like this.
Play video starting at :1:37 and follow transcript1:37
Then tell it you want to connect via SSH by adding the -SSH option. You can also provide the user an address in the form of user at IP address and specifying the port at the end. Altogether, the command would look something like this.
Play video starting at :2:2 and follow transcript2:02
PuTTY also comes with a tool called Plink or PuTTY Link, which is built into the command line after PuTTY is installed. You can use Plink to make remote SSH connections too. SSH can be super useful especially if you want to connect from a computer running Windows to Linux-based operating system running remotely. Microsoft actually provides another way to connect to other Windows computers called the Remote Desktop Protocol or RDP. They're also RDP clients for Linux and OS X too like real VNC and Microsoft RDP on Mac. We'll add some links to these clients in the supplemental reading. RDP provides users with a graphical user interface to remote computers provided the remote computer has enabled incoming RDP connections. A client program called the Microsoft terminal services client or mstsc.exe is used to create RDP connections to remote computers. You can enable remote connections on your computer by opening up the Start menu, right-clicking on This PC, then selecting Properties.
Play video starting at :3:9 and follow transcript3:09
From there, select Remote settings,
Play video starting at :3:18 and follow transcript3:18
and then pick an option from the remote desktop portion of the panel. There are some security implications that come with allowing people to remotely connect to your computer. You should only let users who you trust do this. Typically, in an industry setting, these settings are usually set by the system administrator for the company's computers that connect to the network. Once you've allowed connections on the remote computer and provided you're on the list of users allowed to access it, you can use the Remote Desktop Protocol client mstsc.exe to connect to it from anywhere else on the network.
Play video starting at :3:57 and follow transcript3:57
You can launch the RDP client in a few ways. You can type mstsc at the run box or lookup Remote Desktop connections in the Start Menu.
Play video starting at :4:14 and follow transcript4:14
Once you've launched the client, it'll ask for the name or IP address of the computer you want to connect to. The Windows RDP client can also be launched from the command line where you can specify more parameters like /admin if you want to connect to the remote machine with administrative credentials. We've linked to the RDP documentation in the supplementary reading in case you want to learn more.

> COMPONENTS OF AN OPERATING SYSTEM 
We introduced the concept of an operating system in earlier lessons. But what is it exactly? A lot of us hear the term operating system and think of the interfaces of our desktops and phones like the menus, buttons, and backgrounds. Technically, these are part of the operating system, but it's a little more complex than that. An operating system is the whole package that manages our computers resources and lets us interact with it. There are two main parts to an operating system, the kernel and the user space. The kernel is the main core of an operating system. It talks directly to our hardware and manages our systems resources. As users, we don't interact with the kernel directly. Instead, we interact with the second part of an operating system the, user space. The user space is basically made up of everything outside the kernel. The users thinks that we interact with directly like system programs, user interfaces, etcetera. When we say operating system, we're talking about both the kernel and the user space. There are hundreds of operating systems out there, but we'll focus on the major ones used in IT; Windows, Mac, and Linux. The Windows OS is developed by Microsoft and used widely in the business and consumer space. Most PCs you buy come with windows as the default operating system. PC means personal computer, which technically means a computer that one person uses. But in today's world, PC is more commonly referred to as a Windows computer. So, we'll just refer to a PC as a Windows computer from here. The Mac OS by Apple, is mainly used in the consumer space. If you buy an Apple computer, it'll come with Mac OS preloaded. The last operating system we'll dive into is the Linux operating system. Linux is an open source operating system, which means its software is free to share, modify, and distribute. Linux is used heavily in business infrastructure and in the consumer space. Linux itself is actually a kernel developed by Linus Torvalds. Because of the way it evolved, we call the Linux kernel the Linux operating system. Today, Linux has become a huge community effort with developers all over the world contributing to its success. Because Linux is open source, lots of different organizations package their own version of it. Operating systems like Windows or Macintosh on the other hand, are solely developed by their respective companies. We call these different Linux OSes distributions. Some common Linux distributions are Ubuntu, Debian, and Red Hat. Another operating system that has started to gain popularity is Chrome OS, but we won't go into detail on that one. You can read more about it in the supplemental reading right after this video. We also won't go over any of the operating systems used in mobile devices like Android OS, iOS, and Windows 10 mobile. But you should be aware that mobile phone operating systems are quickly overtaking their desktop counterparts in terms of quantity. Mobile phone usage around the world is more prevalent than desktop computers. You can read more about this in a supplemental reading. But in this course, we're only going to focus on the Windows and Linux operating systems since you'll most likely work with them in IT support. One cool thing to call out is that Chrome OS and Android OS both run the Linux kernel underneath the hood. So, there's a chance you've already worked with Linux and don't even know it. There are lots of operating systems out there and they all share common characteristics. If you're able to understand the basic building blocks of one OS, you can apply that to any operating system and understand how it works. In IT support, it's super common to work with many different operating systems from desktop OSes to smartphone OSes and more. Throughout the rest of this module, we're going to learn what an operating system is. More specifically, we're going to learn about the two components that make up an operating system, the kernel space and the user space. Before we get there, let's do a rundown of the basics. The kernel does file storage in file management. You can compare it to a physical office file where we store data in paper form. A computer file is just data that we store and a file can be anything, a word document, a picture, a song, literally anything. A file system is how we manage these files just like in an office, we use a system to store our files. We don't just put all our files on one cabinet, that would be seriously messy. Instead, we organize those files in folders or directories to make them easier to find. There are lots of different types of file systems, which we'll cover more in depth in future videos. Another important function of the kernel is process management. We have many programs that we want to run on our system. To run them, we manage the order they run in, how many resources they take up, how long they run, etcetera. Our kernel helps us do this with its process management capabilities. For example, you've probably used your computer to do several tasks at once. Maybe you write in a text document while listening to music or playing a video. The process scheduler is part of the kernel that makes this multitasking possible. It switches the execution of each different process on the CPU faster than you can blink, and it gives you the illusion that things are happening simultaneously. Next up is memory management. Our kernel optimizes memory usage and make sure our applications have enough memory to run. We won't get into too much detail right now, so stay tuned for more on this in the next few videos. The last important function that a kernel performs is input/output or I/O management. This is how our kernel talks to external devices like disks, keyboards, networks, connections, audio devices, and more. I/O management is anything that can give us input or that we can use for output of data. If you've ever saved a file to disk, click the mouse button, or use a microphone when video chatting with a friend, you've got the kernel's ability to manage I/O to thank. And that's the basic rundown of the main functions of the kernel; file management, process management, memory management, and I/O management. Finally, we'll talk about the other component of an operating system, the user space. The user space is everything outside the kernel. These are the things that we interact with directly like programs, such as text editors, music players, system settings, user interfaces, etcetera. By the end of this module, you'll hopefully have a solid understanding of all of these functions of an operating system. Let's start by taking a deeper dive into the kernel's file management.

> FILES AND FILE SYSTEMS 
The ability to make remote connections is equally useful on Windows computers. PuTTY is a free, open source software that you can use to make remote connections through several network protocols including SSH. You can visit PuTTY website to download the entire software package with a Microsoft installer. Those are the MSI files we talked about earlier, or you can choose a specific executable which provides the functionality or after like PuTTY.EXE. The PuTTY downloads page is linked in the next supplemental reading in case you want to check it out. Once you've downloaded and installed PuTTY, you can use it by launching the GUI.

A window will appear showing you the basic options for your connection. Make a note of the hostname, port, and connection type options. By default, the port is set to 22, which is the default port the SSH protocol uses, and the connection type is set to SSH. All you need to do is type in the host name or IP address of the computer you want to connect to.

Then, click Open to start up a new SSH session,

and now I've SSH into a remote computer. Running PuTTY from the GUI isn't your only option. You could also use it on the command line. Open up PowerShell prompt and type out the application name like this.

Then tell it you want to connect via SSH by adding the -SSH option. You can also provide the user an address in the form of user at IP address and specifying the port at the end. Altogether, the command would look something like this.

PuTTY also comes with a tool called Plink or PuTTY Link, which is built into the command line after PuTTY is installed. You can use Plink to make remote SSH connections too. SSH can be super useful especially if you want to connect from a computer running Windows to Linux-based operating system running remotely. Microsoft actually provides another way to connect to other Windows computers called the Remote Desktop Protocol or RDP. They're also RDP clients for Linux and OS X too like real VNC and Microsoft RDP on Mac. We'll add some links to these clients in the supplemental reading. RDP provides users with a graphical user interface to remote computers provided the remote computer has enabled incoming RDP connections. A client program called the Microsoft terminal services client or mstsc.exe is used to create RDP connections to remote computers. You can enable remote connections on your computer by opening up the Start menu, right-clicking on This PC, then selecting Properties.

From there, select Remote settings,
Play video starting at :3:18 and follow transcript3:18
and then pick an option from the remote desktop portion of the panel. There are some security implications that come with allowing people to remotely connect to your computer. You should only let users who you trust do this. Typically, in an industry setting, these settings are usually set by the system administrator for the company's computers that connect to the network. Once you've allowed connections on the remote computer and provided you're on the list of users allowed to access it, you can use the Remote Desktop Protocol client mstsc.exe to connect to it from anywhere else on the network.
Play video starting at :3:57 and follow transcript3:57
You can launch the RDP client in a few ways. You can type mstsc at the run box or lookup Remote Desktop connections in the Start Menu.
Play video starting at :4:14 and follow transcript4:14
Once you've launched the client, it'll ask for the name or IP address of the computer you want to connect to. The Windows RDP client can also be launched from the command line where you can specify more parameters like /admin if you want to connect to the remote machine with administrative credentials. We've linked to the RDP documentation in the supplementary reading in case you want to learn more.

> PROCESS MANAGEMENT 
One of the most important tasks that our kernel performs is Process Management. A process is a program that's executing, like our internet browser or text editor. A program is an application that we can run, like Chrome. Take note of the difference. We can have many processes of the same program running at the same time. Think of how many Chrome windows you can open. These are all different processes for the same program. When we want to run our programs, we have to dedicate computer resources to them, like RAM and CPU. We only have a finite amount of resources and we want to be able to run multiple programs. A kernel has to manage our resources efficiently, so that all the programs we want to use can be run. Our kernel doesn't just dedicate all of our computers' resources to one process. Our system is actually constantly running multiple processes that are necessary for it to function, so our kernel has to worry about all of these processes at once. What a program wants to run, a process needs to be created for it. This process needs to have harder resources like RAM and CPU. The kernel has to schedule time for the CPU to execute the instructions in the process. But there's only one CPU and many processes. How does the CPU able to execute multiple processes at once? It actually does it, it executes processes one by one through something known as a time slice. A time slice is a very short interval of time that gets allocated to a process for CPU execution. It's so short that you don't even notice it. I mean, it's super short. The CPU execute one process in milliseconds then executes another process then another. To the human eye everything looks like it runs simultaneously, that's how fast the CPU works. If your computer is running slowly and your CPU resources are being maxed out, there could be many factors at play. It's possible that one process is taking up more time slices than it should. This means that the next process can't be executed. Another possibility is that there are too many processes that want CPU time and the CPU can't keep up with them. Whatever the case may be, even though the kernel does its best to manage processes for us, we might need to step in manually from time to time. We'll talk about how to manage processes in a later course. The kernel creates processes, efficiently schedules them, and manages how processes are terminated. This is important since we need a way to collect all the previously used resources that active processes were taking up and reallocate them to another process.

> MEMORY MANAGEMENT 
Remember that when a process runs, it needs CPU time, but it also needs memory. When processes are run, they have to take up space in memory, so that the computer can read and load them quickly. However, compared to our hard disk drives, memory comes in smaller quantities. So to give us more memory than we physically have, we use something called virtual memory. Virtual memory is a combination of hard drive space and RAM that acts like memory that our processes can use. When we execute a process, we take the data of the program in chunks we call pages. We store these pages in virtual memory. If we want to read and execute these pages, they have to be sent to physical memory or RAM. Why don't we just store the entire program in RAM so we can execute it quickly? Well, you could if it was small enough, but for large applications, it would be wasteful. Have you ever worked in a word processor, and then gone to a menu you don't normally use, and notice the application slow down a little? It's because your computer had to load the page for that menu from virtual memory into RAM. We don't use all the features of our application at once. So why load it up at once? It's similar to cooking a recipe from a cookbook. You don't need to read the whole book just to make one recipe. You only need to read the pages of the recipe you're currently using. When we store our virtual memory on our hard drive, we call the allocated space, swap space. When we get into practical applications of disk partitioning, we'll allocate space for swap. The kernel takes care of all of this for us, of course. It handles the process of taking pages of data and swapping them between RAM and virtual memory. But, the kernel isn't the only hard worker around. You've done great getting through the lessons so far. Nice work. Up next, we'll tackle I/O management. See you there.

> I/O MANAGEMENT 
So far, we've learned how hard our kernel works by handling files, managing files storage, juggling all the different processes running on our computer, and allocating memory. Another important task that our kernel handles, is managing input and output. We refer to devices that perform input and output, as I/O devices. These include our monitors, keyboards, mice, hard disk drives, speakers, bluetooth headsets, webcams, and network adapters. These I/O devices are all managed by our kernel, the kernel needs to be able to load up drivers that are used, so that we can recognize and speak to these different types of hardware. When the kernel is able to start the drivers to communicate with hardware, it also manages the transfer of data in, and out of the devices. I/O doesn't just mean the transfer of data between us and our devices, the devices also need to be able to talk to each other. Our kernel handles all the intercommunication between devices. It also figures out what the most efficient method of transfer is, and it tries its best to make sure our data doesn't have errors during process. When you're troubleshooting or solving a problem with a slow machine, it's usually some sort of hardware resource deficiency. If you don't have enough RAM, you can't load up as many processes. If you don't have enough CPU, you can't execute programs fast enough. If you have too much input coming into the device or too much output going somewhere, you'll also block other data from being sent or received. It's slow! is one of the most common problems you'll solve in an I.T. support role. Knowing the potential sources of that slowness is a big help when you're trying to narrow down the cause of the latency. Troubleshooting is such an important part of any IT support role. That's why, we'll share some troubleshooting best practices in detail, in upcoming lessons of this course. Beyond desktop support, identifying the source of a resource bottleneck in a server or large I.T. system like a web application, can unlock performance gains and new heights of responsiveness for your users.

> INTERACTING WITH THE OS: USER SPACE 
Okay, we've covered the kernel's major responsibilities. Now, let's discuss the final major aspect of an operating system, how humans interact with it. This is what we call, the userspace. When we interact with an operating system, we want to do certain functions like create files and folders, open applications, delete items, you get the idea. There are two ways that we can interact with our OS, with a shell or a graphical user interface. There are also some shells that use graphical user interfaces, but we'll work with the command line interface or CLIA shell for the most part. This just means that we'll use text commands. A graphical user interface or GUI, is a visual way to interact with a computer. We use our mouse to click and drag, to open folders etc. We can see everything we do with it. You probably use a GUI every day without realizing you're using one. To watch this video, you probably used a GUI. Clicking icons and navigating menus to open your web browser and navigate to the Coursera website. People usually recognize a device or product based on its GUI. You might be able to spot the difference between a computer running Microsoft Windows or Mac OS based on the design of the windows, menus and icons. You've probably seen GUIs in other places too, like mobile phones and tablets, ATM machines and airport kiosks. A shell is basically a program that interprets text commands and sends them to the OS to execute. Before we had fancy visual interfaces, commands like create a file had to be typed out. While we have GUIs today, the shell is still commonly used to run commands, especially by power users. Power users are above average computer users. In Linux especially, it's essential that you actually know commands, not just a GUI. This is because most of the Linux machines you interact with in IT support, will be accessed remotely. Most of the time, you won't be given a GUI. There are lots of different types of shells. Some have different features, some handle performance differently, it's the same concept behind different operating systems. For our purposes, we'll just be using the most common shell, Bash or Bourne Again Shell in Linux. There's also a shelf for Windows called Powershell, but we won't be covering it here. You'll learn more about Windows power shell and the third course of this program. Operating systems and you becoming a power user. Throughout this program, we'll learn how to use the Windows GUI and Windows shell, Powershell. You might be thinking, but it's easier for me to navigate a GUI,than it is to use commands to do the same thing. So why would I want to learn both? I can't stress this enough, it's vital for you to know how to use a shell in an IT support role. Some tasks can only be completed through commands. In more advanced IT roles, you might have to manage thousands of machines. You don't want to have to click a button or drag a window on every machine when you can just run a command once. You're actually going to learn how to automate this in a later course. Using a GUI and shell isn't all you'll be doing, we'll also interact with our operating system through applications. There are system applications and libraries that we use on a day-to-day basis, like the log in application, system settings and more. Throughout this course, you learn more about how to use system applications. And we'll even get hands-on with the applications used in your operating system.

> LOGS 
Imagine this scenario: you're playing your favorite video game and you finally get to the big boss. You spent countless hours finding this boss neglecting all other responsibilities like your job, school, even hygiene. That's pretty gross but I get it. So, you're right about to kill the big boss when suddenly, your game console shuts off completely. You'll probably freak out for a second but then you remember, it's okay, you saved the game before the boss came along. So now, you can turn it back on and you'll be at the same spot but then your console shuts off again. This happens over and over. You like most people are devastated. You find to a fit of rage but then just before you toss your console out, you make one last ditch effort and yell, "Tell me, what's wrong with you?" Suddenly, you hear a faint voice telling you what you want to hear. Wouldn't that be amazing? Sure, that scenario was a bit exaggerated but my point is that our computers actually can talk to us and tell us what's wrong. Maybe they won't whisper answers to us, but they speak to us in the form of logs. Logs or files that record system events on our computer. Just like a systems diary our computer will record events like when it was turned on, when a driver was loaded and even when something isn't working in the form of error messages. In all operating systems, logs are kept so we can refer back to them when we need to find out something that happened. But logs can be hard to navigate because our computer will essentially record everything. Here's what a log looks like. As you can see, it can be tough to make your way through a log but with a little bit of elbow grease we can figure out what happened on our computer and piece together a solution. We'll see an example of how a log is useful in figuring out an issue in a later lesson. We'll dive into the technical details of logs in a later course. For now, just be aware that we can investigate details about our computer that aren't obvious to us. Unfortunately, our computers, cars, and machines don't have a little voice that tells us what's wrong when there's a problem. But by the end of this program, you'll be able to navigate and read logs, so you won't even need it.

> BOOT PROCESS 
In this lesson, we're going to learn how our operating system starts up. As an IT support specialist, you'll probably work on lots of computers that won't start. It's important to know the steps an operating system takes so you can help diagnose the sort of issue. Booting a computer or starting a computer comes from the phrase to pull oneself up by one's bootstraps. Basically, it means to start from nothing and follow a series of steps to arrive at a fully operational system. When we start up a computer, we use the term boot. For most operating systems, the boot process follows a general pattern. Much like how we have different cars start up in the same way. Put in the key, turn on the ignition, et cetera. Here's a rundown of the boot process. First, the computer is powered on. Remember what we learned about the BIOS/UEFI in earlier videos? The BIOS/UEFI is a low-level software that initializes our computer's hardware to make sure everything is good to go. So next, the BIOS/UEFI runs a process called the Power On Self Test or POST. The POST performs a series of diagnostic tests to make sure that the computer is in proper working order. Next, depending on the BIOS/UEFI configuration, a boot device will be selected. Devices that are attached to our system, like hard drives, USB drives, CD drives, et cetera are configured in a certain boot order. The devices will be checked in this order and the computer will search for what's known as a bootloader. The bootloader is a small program that loads the operating system. Once our computer finds a bootloader on a device in the listed order, it will start to execute this program. This will then start to load a larger and more complex program and eventually loads our operating system. Once the bootloader loads up our operating system, our kernel gets loaded. The kernel controls access to our computers resources. It also loads up drivers and more, so that our hardware can talk to our software. Next, essential system processes and user space items are launched. These include processes like user log in, spinning up a desktop environment, and more which basically allows us to interact with our system. And that's it. After these simple steps, you'll be able to get to work.

> MOBILE OPERATING SYSTEMS 
Now, let's talk about mobile operating systems. So far, we've talked about two broad categories of mobile devices. Some mobile devices are general-purpose computing devices like tablets or smartphones. Other mobile devices like fitness monitors, e-readers, and smartwatches are designed to do a smaller set of tasks. General-purpose mobile devices generally use a mobile operating system that's derived from other operating systems. For example, Android is derived from Linux and iOS shares a lot of core components with Mac OS. So how are mobile operating systems different from the OS's that they're based on? Mobile devices run on batteries that have to be recharged or replaced on a regular basis. You want the device to last as long as possible between charges. So mobile operating systems are optimized to use as little power as possible, for example, by removing OS features and applications that the mobile device doesn't need. We also use motion, touch, and voice to interact with mobile devices in very different ways from desktop or server computers. This requires adding device drivers and support to the mobile operating system. More specialized mobile devices like fitness trackers, e-readers, and GPS devices often used custom OS's that are optimized for what the device is designed to do. These devices are even more slimmed down to run on very minimal hardware with very minimal battery power. They might also be built using specialized chips and peripherals which more general purpose operating systems don't know how to run. We've linked to some examples of these specialized mobile operating systems in the supplemental reading. There's a bunch more to learn about working with mobile operating systems and we'll dive into that in another course.



