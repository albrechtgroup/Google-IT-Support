> WHAT IS SOFTWARE? 
Video games, music players, and internet browsers are all different types of software that have completely different functions. Think of the apps on your phone and your laptop. We spend a lot of time interacting with this type of software but we may not know how it actually works or gets added to our systems. In the last few videos, we learned about networking and the internet. There are tons of applications out there that require the Internet to work. Think about it. Your social media apps, messaging apps, and others run off the Internet. This Internet integration isn't just magically added to your application, it's built-in to require it to function. Before we go too far into the world of software, I want to call out some common terms related to software that you might hear. Coding, scripting, and programming are all terms that might seem a little blurry. They generally refer to the same thing but they each have small distinctions. Coding is basically translating one language to another. This can be coding from English to Spanish, English to Morse code or even English to a computer language. When someone builds an application, we refer to it as coding an application. Scripting is coding in a scripting language. We'll talk about scripting languages in a later lesson but scripts are mainly used to perform a single or limited range task. There are languages we can use to build these. Programming is coding in a programming language. Programming languages are special languages that software developers use to write instructions for computers to execute. Larger applications like your web browser, text editors, and music players are all usually written in programming languages. When we use the term software, it generally refers to something that was programmed. We'll use these terms pretty interchangeably so don't sweat the details, now onwards and upwards. So, what is software made of and who builds it? That's a great question. Anyone who knows a programming or a scripting language can use it to write code. There's a huge demand for this skill set and it's becoming easier for someone to learn to code. If you're going to be working in IT, it's important that you understand how software works and how it gets installed on your systems. You might encounter software errors or just good old fashioned failures and you need to understand how to deal with them. By the end of this module, you'll be able to understand what software is, how it works, and how to install it, remove it and update it, all within the Linux and Windows operating systems.

> TYPES OF SOFTWARE 
When you rate content, create a piece of art, or engineer something, your work is protected for your use and distribution. There's usually some other caveats depending on the laws in your country but in general, copyright is used when creating original work. Software that is written is also protected by copyright. Software developers can choose what they do with their software. For commercial software, it's common to let someone else use their software, if they pay for a license. For non-commercial software, a popular option is making it open-source. This means the developers will let other developers share, modify, and distribute their software for free. Score. Some amazing software efforts have been developed in advance because of open source. One major example is the Linux kernel which is used in the Android OS and in enterprise and personal computers. Hundreds of millions of devices are running Linux at this very second LibreOffice, GIMP, and Firefox are other examples of open source software. Open source projects are usually contributed by developers who work on the project for free in their free time. These massive software development efforts were essentially built by a community of volunteers. How great is that? In I.T. environment, you'll have to pay special attention to the types of software you use. Some may require you to pay multiple licenses to use it, others may be free and open source. It's important to check the license agreement of any software before you install it. We've talked about some of the basics of software, but now let's shift to the two types of software you'll encounter categorized by function. Application Software is any software created to fulfill a specific need, like a text editor, web browser, or graphics editor. System software is software used to keep our core system running, like operating system tools and utilities. There's also a type of system software that we haven't defined yet, called firmware. Firmware is software that's permanently stored on a computer component. Can you think of a firmware that we've talked about already? If you thought of the BIOS, you're right. The BIOS helps startup the hardware on your computer and also helps load up your operating system. So it's important that it's in a permanent location. I should also call out software versions. These are important because they tell us what features were added to a specific software iteration. You'll encounter lots of software versions while you work with software. Developers might sometimes use a different standard when distinguishing a version. But in general, the majority of versions follow a sequential numbering trend. You might see something like this, 1.2.5 or 1.3.4, which of these do you think is the newer version? It's 1.3.4 because it's a larger number than 1.2.5. You can read more about software versioning in the supplemental reading. You'll have to work with all kinds of software. Fortunately, it basically all works the same way. Once you learn how one piece of software works, you'll understand how others might function. We're going to learn how in the next few videos.

> ABSTRACTION 
Earlier in this course, we talked about how programs are instructions that are given to a CPU. We can send binary code or bits to our CPU, then they'll use an instruction set to run those commands. But these CPUs might be from different manufacturers and may have different instructions. There might even be all kinds of different hardware components, like video cards and hard drives, that also have their own special interfaces. So how do we write a program that the hardware can understand? Well, one way would be to write a program for each possible combination of CPU and hardware using the native languages and interfaces of these components. But there are potentially millions of possible configurations of hardware. So how do we get anything to work with all these complex and diverse hardware? Well, thanks to the efforts of computer scientists and the principle of abstraction, we can now use programming languages to write instructions that can be run on any hardware.

> COMPUTING 
Remember that in the 1950s, computer scientists use punch cards to store programs. These punch cards represented bits that the CPU would read and then perform a series of instructions based on what the program was. The binary code, could look like this, and the instructions would be translated to this. Grab some input data from this location in memory, using the input data, do some math, then put some output data into this location in memory. But storing programs on punch cards was a long and tedious task. The programs had to be kept on stacks and stacks of punch cards. Computer scientists needed a better way to send instructions to a machine, but how? Eventually, a language was invented called Assembly language, that allowed computer scientists to use human readable instructions, assembled into code that the machines could understand. Instead of generating binary code, computer scientists could program using machine instructions, it is like this, take integer from register one, take integer from register two, add integer from register one and register two and output to register four. This example makes it look like a human can read it, but don't be fooled. Let's take an example of saying something simple like, hello world, in Assembly language. It looks pretty robotic. Don't get me wrong, that's still an improvement over it's binary code cousin. But Assembly language will still register thin veil from machine code. It's still didn't let computer programmers use real human words to build a program. And a program that was written for a specific CPU, could only be run on that CPU or family of CPUs. A program was needed that could run on many types of CPUs. Enter compiled programming languages. A compiled programming language uses human readable instructions, then sends them through a compiler. The compiler takes the human instructions and compiles them into machine instructions. Admiral Grace Hopper, invented this back in 1959, to help make programming easier. Compilers are a key component to programming, and helped to pave the road that led us to today's modern computing. Thanks to compilers, we can now use something like this, and it will be the same thing as this. Computer scientists have developed hundreds of programming languages in the past couple of decades to try and abstract the different CPU instructions into it's simpler commands. Along the way, another type of language emerged that was interpreted rather than compiled. Interpreted languages aren't compiled ahead of time. A file that has code written in one of these languages is usually called a Script. The script is run by an interpreter, which interprets the code into CPU instructions just in time to run them. You'll learn how to write code using a scripting language later in this program. As an IT support specialist, scripting can help you by harnessing the power of a computer to perform tasks on your behalf, allowing you to solve a problem once and then move on to the next thing. Programming languages are used to create programs that can be run to perform a task or many tasks. There are lots of types of programs and in the next lesson, we'll talk about how to manage them.

