Isn't the history of computers super interesting? I love going back in time and seeing how we got to this exciting point in computing. You've already taken the first few steps to building your foundational knowledge of IT, and before we dive deeper, I'd like to take a moment to introduce myself. My name is Devan Sri-Tharan, I've been working in IT for ten years. I'm a Corporate Operations Engineer at Google where I get to tackle challenging and complex IT issues. Thinking back, my first experience with tech began when I was about nine years old, when my dad brought home the family's first computer. I remember my dad holding a floppy disk and telling me that there was a game on it. To my dad's amazement I somehow managed to copy the game from disk onto the computer's hard drive. While it might seem like a trivial task now, this devise was just so new to us back then. Sure, I loved the different games I could play, but what I really loved was tinkering with the machine, trying to get it to do what I want it to do. While that floppy disk computer might have ignited my passion for technology, it was actually my first few job experiences that really started to shape my IT career. One was in retail, [LAUGH] selling baby furniture and the other was at a postal store, where I helped customers ship their packages, and became the one person IT crew. It might sound odd that working in retail inspired my career, but I've realized I really enjoy communicating with customers, trying to understand their needs and offering a solution. My first experience working directly in IT was in college as an IT support specialist intern. From there, I worked as an IT consultant to decommission an entire IT environment. This was my first experience working directly with large IT infrastructure, and pushing myself outside my comfort level as a college student. I bring up these few jobs for a reason. These experiences helped shape my career in IT. I knew at that time that I wanted to go into tech, but I struggled where I wanted to focus my career. Starting at Google as an IT generalist allowed me to experience many different areas of technology. It allowed me to figure out the jobs I didn't want to do, before I was able to identify exactly what I did want to do. Really passionate about IT infrastructure, but you can't understand infrastructure until you understand hardware. So let's dig in. In IT, hardware is an essential topic to understand. You might find yourself replacing faulty components or even upgrading an entire fleet of machines one day. By the end of this lesson, you'll be able to describe all the physical parts of a computer and how they work together. You'll even be able to build your own computer. Once you figure out how one computer works, you'll be able to understand how any type of computer works. Excited? I am, let's get started.

Let's face it, computers are everywhere. You come into contact with them at home, work, the airport, the grocery store, you're using some type of computer to take this course. You know what? There's probably one in your pocket right now. While computers are complex and can seem daunting to learn, they ultimately just calculate, process, and store data. In this lesson, we're going to take a peek at what's inside of the computer. We'll spend the next few lessons explaining how each of these components work. But for now, let's check out a typical desktop setup. Desktops are just computers that can fit on or under our desks. So here we have a monitor, a keyboard, a mouse, and a desktop.
Play video starting at ::54 and follow transcript0:54
Sometimes you might even add a webcam, speakers, or a printer set up. We'll call these physical components, hardware. Let's take a look at the back of the computer.
Play video starting at :1:10 and follow transcript1:10
You can see common connectors here, the power outlet here, and the common ports here. Ports are connection points that we can connect devices to that extend the functionality of our computer. We're going to detail about the ports you see here in a later lesson. But here's a quick rundown. We have a port here to connect to a monitor, and a few ports here to plug your keyboard and mouse.
Play video starting at :1:35 and follow transcript1:35
There's another important one here for our network connection.
Play video starting at :1:40 and follow transcript1:40
With just these ports, we're able to have the basic functionality to browse the web and much more. Things look pretty similar in a laptop.
Play video starting at :1:48 and follow transcript1:48
Here are some of the same ports.
Play video starting at :1:52 and follow transcript1:52
A built-in monitor, And a keyboard.
Play video starting at :1:58 and follow transcript1:58
There are also physical components inside the laptop case that are hidden for portability. Once you figure out how one computer works, you can figure out how any other computer works. Okay, this is my favorite part. Let's open up this desktop and take a deeper look. Let me first clean up my desk.
Play video starting at :2:22 and follow transcript2:22
Get ready for it.
Play video starting at :2:25 and follow transcript2:25
Whoa, it looks pretty complicated, but that's okay. We'll take you through it. Let's start with a quick tour. Then we'll dive deeper into each of these parts in the next lesson. Right here, this component, it's a CPU or central processing unit, which is covered by this heat sink. You could think of the CPU as the brain of our computer. The CPU does all the calculations and data processing. It communicates pretty heavily with this component right here, RAM or Random Access Memory. RAM is our computer's short-term memory. We use this component when we want to store data temporarily. Like let's say, you're typing something into a chat or a piece of text in a word processor. This information is stored in the RAM. Don't worry, we'll cram in more details on RAM in the later lesson. When we want to store anything in long-term memory, we use this component here, the hard drive. The hard drive holds all of our data, which can include music, pictures, applications. Let me show you something else interesting. Have you noticed this large slab here? This is our motherboard.
Play video starting at :3:38 and follow transcript3:38
It holds everything in place and lets our components communicate with each other. It's the foundation of our computer. You can think of the motherboard as the body or circulatory system of the computer that connects all the pieces together. The last component we'll talk about is our power supply, which converts electricity from our wall outlet onto a format that our computer can use. You know what's interesting? All these components make up most computers, even a mobile phone. While it might look very different from your laptop, a mobile phone just uses a smaller version of the hardware that we saw in the desktop and laptop today. So now that we've covered the basic anatomy of the computer, we'll go over each of these components in depths in the next few lessons. Understanding how computer hardware works is a really helpful skill set in IT support, since an IT department maintains the hardware that a company uses. A solid understanding of these computer internals will come in handy when troubleshooting hardware related problems, and taking things apart to see how they work is just super fine.

Before we get our hands dirty with learning how to build a computer, let's talk theory first. In an earlier lesson, we talked about binary, and how computers perform calculations. Remember that our computer can only communicate in binary, using ones and zeroes. Our computers speak in machine language, but we of course speak in human languages, like English, Spanish, Mandarin, Hindi. You get the idea. If we want to communicate with our machines, we have to have some translation dictionary. Just if I wanted to say something in Spanish, I'd look it up in an English-Spanish dictionary. Well our computers have a built-in translation book. In this lesson, we'll dive deeper into how our computer translates the information we give it into instructions that it understands. Right now, you're probably using a web browser, music player, text setter or something else in your computer. We interact with these applications on a daily basis. They are referred to as Programs. Programs are basic instructions that tell the computer what to do. We technically store programs on durable media like hard drives. You can think of programs like cooking recipes. We get these recipes all stored together in a cook book just like apps stored in a hard drive. Now we want to make a ton of food. So we hire a chef to follow our recipes and whip up something good. The faster our chef works, the more food she'll prepare. The chef is our CPU, she processes the recipes we send her and makes the food. Our chef works super fast, so fast that she can cook faster than she can read. So, we take copy of the recipes and put them into RAM. Remember that RAM is our computer's short-term memory. It stores information in a location our CPU can access faster than it could with our hard drive. Now we can give our chef one or two recipes at a time, instead of reciting the entire cookbook to her. Okay, now let's say I want to make a peanut butter and jelly sandwich. I see a pretty good recipe, and send it to our chef to make.
Play video starting at :2:13 and follow transcript2:13
Remember that our chef needs these instructions quickly, so I don't send her the entire recipe, I send her one line at a time. 1, Get two slices of bread. 2, Put peanut butter on one slice. 3, Put jelly on another slice. 4, Combine the two slices of bread. Now, let me throw one more thing at you. Our chef can only communicate with us in ones and zeroes. So instead of sending something readable, like the recipe for a peanut butter and jelly sandwich, we have to send her something like this. In reality, this process is a little more complicated. Our CPU is constantly taking instructions and executing them. These instructions are written in binary but how do they travel around the computer? In our computer, we have something called the External Data Bus or EDB.
Play video starting at :3:5 and follow transcript3:05
It's nothing like a bus at all. It's a row of wires that interconnect the parts of our computer, kind of the veins in our body. When you send a voltage to one of the wires, we say the state of the wire is on, or represented by a 1. If there's no voltage, then we say that the state is off, represented by a 0. This is how we send around our ones and zeroes. Sound familiar? The last lesson we talked about how transistors help us to send voltages. Now we know how our bits physically travel around computer. The EDB comes in different sizes, 8 bit, 16 bit, 32, even 64. Can you imagine if you had 64 wires going? You can move around a lot more data. Right now, were just going to stick with using an EDB with 8 bits in our examples. Sending 1 byte at a time. Okay so now, our CPU is receiving a byte and it needs to get to work.
Play video starting at :4:2 and follow transcript4:02
Inside the CPU there are components known as Registers.
Play video starting at :4:7 and follow transcript4:07
They let us store the data that our CPU works with. If for example, our CPU wanted to add two numbers, one number would be stored in a register a.
Play video starting at :4:17 and follow transcript4:17
Another number would be stored in register b. The result of those two numbers would be stored in register c. Imagine the register is one of our chef's work tables. Since she has a place to work, she can start to cook. To do so she uses a translation book to translate her binary into tasks that she can perform.
Play video starting at :4:38 and follow transcript4:38
Let's jump back for a second. Remember that our programs are copied into RAM for the CPU to read. RAM is memory that is randomly accessed, allowing our CPU to read from any part of RAM as quickly as any other part. We don't actually send data from RAM over the EDB. There would be way to much stuff. RAM can hold millions, even billions, of rows of data. Despite our sandwich example, most of our recipes aren't simple at all. There can be thousands of lines long. We want to process them and we don't actually go in any particular order. Since we can only send one line of data through the EDB at the time, we need the help of another component, the Memory Controller Chip or MCC. The MCC is a bridge between the CPU and the RAM. You can think of it, a nerve in your brain connecting to your memories. The CP talks to the MCC, and says, hey, I need the instructions for step number three of this recipe. The MCC finds the instructions for step number three in RAM, grabs the data, and sends it through the EDB. There's another bus. There's nothing like a bus involved in the process called the Address bus. It connects the CPU to the MCC, and sends over the location of the data, but not the data itself. Then the MCC takes the address and looks for the data. And then data is then sent over the EDB.
Play video starting at :6:5 and follow transcript6:05
Believe it or not, RAM isn't the fastest way we can get more data to our CPU for processing.
Play video starting at :6:11 and follow transcript6:11
The CPU also uses something known as Cache.
Play video starting at :6:14 and follow transcript6:14
Cache is smaller than RAM, but it let's us store data that we use often, and let's us quickly reference it. Think of RAM like a refrigerator full of food. It's easy to get into, but it takes time to get something out. On the flip side of that, Cache is like the stuff we have in our pockets. It's used to store recently or frequently accessed data. There are three different cache levels in a CPU, L1, L2, and L3. L1 is the smallest and fastest cache. If you're interested in learning more about this, you can check out the supplemental reading I've included right after this video. So now we understand how our RAM interacts with our CPU. But how does our CPU know when the set of instruction ends, and a new one begins. Our CPU has an internal clock that keeps its operational in sync. It connects to a special wire called Clock wire. When you send or receive data, it sends a voltage to that clock wire to let the CPU know it can start doing calculations. Think of our clock wires as the ticking of a clock. For every tick, the CPU does one cycle of operations. When you send a voltage to the clock wire, it's referred to as a clock cycle. If you have lots of data you need to process in a command. You need to run lots of clock cycles.
Play video starting at :7:34 and follow transcript7:34
Have you ever seen a CPU in the store and has something labeled 3.4ghz, this number refers to the Clock speed of the CPU. Which is a maximum number of clock cycles that it can handle in a set in a certain time period. 3.40 gigahertz is 3.4 billion cycles per second. That's super fast. But just because it can run at this speed, doesn't mean it does. It just means that it can't exceed this number. Still, that number doesn't stop some people from trying. There's a way you can exceed the number of clock cycles on your CPU on almost any device. It's referred to as Overclocking and it increases the rate of your CPU clock cycles in order to perform more tasks. This is commonly used to increase the performance in low-end CPUs. Let's say you're a gamer and you want to have better graphics and less lag while playing. You might want to overclock your CPU when you play the game, but there are cons to doing this, like potentially overheating your CPU. You can read more about overclocking in the next supplementary reading.

